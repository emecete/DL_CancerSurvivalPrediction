discreteVar_visualDescription <- function(variable){
# 'variable' must be a vector (dataframe column)
variable_name <- strsplit(deparse(substitute(variable)), "$", fixed=TRUE)[[1]][2]
t <- kable(cbind(round(t(prop.table(table(variable))*100), 1), "%"))
df <- as.data.frame(table(variable))
p <- ggplot(data = df, aes(x="", y=Freq, fill=variable)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
scale_fill_discrete(name=variable_name)
return(list(plot=p, table=t))
}
continuousVar_visualDescription <- function(data, variable,
variable_disc){
# 'variable' must be a vector (dataframe column)
variable_name <- strsplit(deparse(substitute(variable)), "$", fixed=TRUE)[[1]][2]
variable_disc_name <- strsplit(deparse(substitute(variable_disc)), "$", fixed=TRUE)[[1]][2]
print(variable_name)
t <- kable(as.array(t(summary(variable))))
p <- ggplot(data = data, aes(variable,
fill = variable_disc,
col=I("grey"))) +
geom_histogram(binwidth = 2) +
scale_x_continuous(breaks = seq(min(variable), max(variable)+1,
2)) +
xlab(variable_name) + scale_fill_discrete(name=variable_disc_name)
return(list(plot=p, table=t))
}
chiTest <- function(var1, var2){
var1_name <- deparse(substitute(var1))
var2_name <- deparse(substitute(var2))
conting <- round(prop.table(table(var1, var2))*100, 2)
dimnames(conting) <- list(assign(var1_name, dimnames(conting)$var1),
assign(var2_name, dimnames(conting)$var2))
test <- chisq.test(var1, var2)
return(list(contingence = conting, test = test))
}
cont_disc.test <- function(cont, disc){
levels <- levels(disc)
if(length(levels) == 2){
var1 <- cont[which(disc==levels[1])]
var2 <- cont[which(disc==levels[2])]
if(shapiro.test(var1)$p.value>0.01 &&
shapiro.test(var2)$p.value>0.01 &&
var.test(cont ~ disc)$p.value>0.01){
print("T test is used because of 2 factors and normal distribution")
test <- t.test(cont~disc)
table <- data.frame(c(mean(var1), sd(var1)), c(mean(var2), sd(var2)))
rownames(table) <- c("Media", "Desciación típica")
colnames(table) <- levels
} else {
print("Wilcoxon test is used because of 2 factors and not normal distribution")
test <- wilcox.test(cont~disc)
table <- data.frame(c(median(var1),
quantile(var1)[[4]]-quantile(var1)[[2]]),
c(median(var2),
quantile(var2)[[4]]-quantile(var2)[[2]]))
rownames(table) <- c("Mediana", "Rango Intercuartílico")
colnames(table) <- levels
}
}else if(length(levels) > 2){
print("Anova test must be used because of more than 2 factors")
}
return(list(test=test, table=table))
}
recodification <- c("Almost every day"= "Usa",
"At least once a week, but not every day"="Usa",
"Less than once a week" = "No usa",
"Not at all" = "No usa",
"I have never used a smartphone or tablet" = "No usa")
pwd$techUse <- plyr::revalue(pwd$techFamiliarity_1,
recodification)
print(recodification)
techUse_VisualDescription <- discreteVar_visualDescription(variable = pwd$techUse)
techUse_VisualDescription$table
techUse_VisualDescription$plot
age_visualDescription <- continuousVar_visualDescription(pwd,
pwd$age,
pwd$techUse)
age_visualDescription$table
age_visualDescription$plot
age_techUse.wilcox <- cont_disc.test(pwd$age, pwd$techUse)
kable(age_techUse.wilcox$table)
paste("p-valor: ", age_techUse.wilcox$test$p.value)
gender_visualDescription <- discreteVar_visualDescription(pwd$gender)
gender_visualDescription$table
gender_visualDescription$plot
gender_techUse.CHI <- chiTest(pwd$gender, pwd$techUse)
kable(gender_techUse.CHI$contingence)
paste("p-valor: ", gender_techUse.CHI$test$p.value)
marital_visualDescription <- discreteVar_visualDescription(pwd$marital_status)
marital_visualDescription$table
marital_visualDescription$plot
marital_techUse.CHI <- chiTest(pwd$marital_status, pwd$techUse)
kable(marital_techUse.CHI$contingence)
paste("p-valor: ", marital_techUse.CHI$test$p.value)
recoding <- c("Unmarried"= "No",
"Married"="Yes",
"Common law partner" = "Yes",
"Divorced" = "No",
"Widowed" = "No")
pwd$married <- plyr::revalue(pwd$marital_status,
recoding)
print(recoding)
married_visualDescription <- discreteVar_visualDescription(pwd$married)
married_visualDescription$table
married_visualDescription$plot
married_techUse.CHI <- chiTest(pwd$married, pwd$techUse)
kable(married_techUse.CHI$contingence)
paste("p-valor: ", married_techUse.CHI$test$p.value)
recoding <- c("Elemantary School"= "Low",
"Secondary School"="High",
"Higher education"="High")
pwd$education <- plyr::revalue(pwd$education,
recoding)
print(recoding)
education_visualDescription <- discreteVar_visualDescription(pwd$education)
education_visualDescription$table
education_visualDescription$plot
education_techUse.CHI <- chiTest(pwd$education, pwd$techUse)
kable(education_techUse.CHI$contingence)
paste("p-valor: ", education_techUse.CHI$test$p.value)
MMSE_visualDescription <- continuousVar_visualDescription(pwd, pwd$MMSE.total,
pwd$techUse)
MMSE_visualDescription$table
MMSE_visualDescription$plot
MMSE_techUse.wilcoxon <- cont_disc.test(pwd$MMSE.total, pwd$techUse)
kable(MMSE_techUse.wilcoxon$table)
paste("p-valor: ", MMSE_techUse.wilcoxon$test$p.value)
GDS_visualDescription <- continuousVar_visualDescription(pwd, pwd$GDS_Total,
pwd$techUse)
GDS_visualDescription$table
GDS_visualDescription$plot
GDS_techUse.wilcoxon <- cont_disc.test(pwd$GDS_Total, pwd$techUse)
kable(GDS_techUse.wilcoxon$table)
paste("p-valor: ", GDS_techUse.wilcoxon$test$p.value)
recodification <- c("Single"= "Yes",
"Spouse/Common law"="No",
"Children" = "No",
"Other" = "No")
pwd$living_alone <- plyr::revalue(pwd$living_arrangements,
recodification)
print(recodification)
alone_visualDescription <- discreteVar_visualDescription(pwd$living_alone)
alone_visualDescription$table
alone_visualDescription$plot
alone_techUse.CHI <- chiTest(pwd$living_alone, pwd$techUse)
kable(alone_techUse.CHI$contingence)
paste("p-valor: ", alone_techUse.CHI$test$p.value)
EVA_visualDescription <- continuousVar_visualDescription(pwd, pwd$EVA,
pwd$techUse)
EVA_visualDescription$table
EVA_visualDescription$plot
EVA_techUse.wilcoxon <- cont_disc.test(pwd$EVA, pwd$techUse)
kable(EVA_techUse.wilcoxon$table)
paste("p-valor: ", EVA_techUse.wilcoxon$test$p.value)
QoL_visualDescription <- continuousVar_visualDescription(pwd, pwd$QOL_total,
pwd$techUse)
QoL_visualDescription$table
QoL_visualDescription$plot
QoL_techUse.wilcoxon <- cont_disc.test(pwd$QOL_total, pwd$techUse)
kable(QoL_techUse.wilcoxon$table)
paste("p-valor: ", QoL_techUse.wilcoxon$test$p.value)
#mmse_education.CHI$p.value <- chisq.test(pwd$MMSE.total, pwd$education)
#gender_education <- chisq.test(pwd$gender, pwd$education)
pvalues <- data.frame(pvalue = c(age_techUse.wilcox$test$p.value,
gender_techUse.CHI$test$p.value,
marital_techUse.CHI$test$p.value,
married_techUse.CHI$test$p.value,
education_techUse.CHI$test$p.value,
MMSE_techUse.wilcoxon$test$p.value,
GDS_techUse.wilcoxon$test$p.value,
alone_techUse.CHI$test$p.value,
EVA_techUse.wilcoxon$test$p.value,
QoL_techUse.wilcoxon$test$p.value),
row.names = c("edad", "género", "estado civil", "casado o no",
"nivel educativo", "MMSE", "GDS",
"vive solo o no", "EVA", "QoL"))
pvalues <- data.frame(pvalue = pvalues[order(pvalues),], row.names = rownames(pvalues)[order(pvalues)])
kable(pvalues)
data_lasso <- na.omit(pwd %>% dplyr::select(techUse,
age,
gender,
married,
education,
MMSE.total,
GDS_Total,
QOL_total))
x <- model.matrix(techUse~., data_lasso)[,-1]
y <- ifelse(data_lasso$techUse == "Usa", 1, 0)
# Find the best lambda using cross-validation
set.seed(1234)
cv.lasso <- cv.glmnet(x, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
lasso <- data.frame(coef=coef(model)[-1], OR = exp(coef(model))[-1],
row.names = attributes(coef(model))$Dimnames[[1]][-1])
kable(lasso)
predicted <- predict(model, newx = x,
s = c(cv.lasso$lambda.min), type = "class")
confusionMatrix(as.factor(predicted), as.factor(y))
model.step <- step(glm((techUse=="Usa")~., data = data_lasso), direction = "both", family=binomial("logit"))
model.step$coefficients
newx <- data.frame(age = data_lasso$age, gender = data_lasso$gender,
education = data_lasso$education,
MMSE.total = data_lasso$MMSE.total)
predicted <- predict(model.step, newx = newx)
predicted <- ifelse(predicted>=0.5, 1, 0)
confusionMatrix(as.factor(predicted), as.factor(y))
logistic <- glm((techUse=="Usa")~., data = data_lasso)
summary(logistic)
predicted <- predict(model.step, newx = newx)
predicted <- ifelse(predicted>=0.5, 1, 0)
confusionMatrix(as.factor(predicted), as.factor(y))
knitr::opts_chunk$set(echo = TRUE)
chiTest(pwd$techUse, pwd$freqUse)
# library
library(treemap)
# Create data
group=c("group-1","group-2","group-3")
value=c(13,5,22)
data=data.frame(group,value)
# treemap
treemap(data,
index="group",
vSize="value",
type="index"
)
install.packages("treemap")
# library
library(treemap)
# Create data
group=c("group-1","group-2","group-3")
value=c(13,5,22)
data=data.frame(group,value)
# treemap
treemap(data,
index="group",
vSize="value",
type="index"
)
data
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index"
)
a
b <- treegraph(data,
index="group",
vSize="value",
type="index"
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index"
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n = 3
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n = 5
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n = 0
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n = 3
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index"
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n=3
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index"
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n=2
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n=1
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index", n=3
)
# treemap
a <- treemap(data,
index="group",
vSize="value",
type="index"
)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
#library
library(treemap)
#setting working directory
setwd("~/INGENIERIA_DE_LA_SALUD/4CUARTO/SEGUNDO_CUATRIMESTRE/TFG/CODE/DL_CancerSurvivalPrediction")
#reading pat1 csv
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
counts
names(counts) <- c("y", "m", "n", "Freq")
nrow(counts)
counts <- counts[seq(1,100),]
# treemap
a =treemap(counts,
index=c("y","m","n"),
vSize="Freq",
type="index",
color
)
# treemap
a =treemap(counts,
index=c("y","m","n"),
vSize="Freq",
type="index",
)
# treemap
a =treemap(counts,
index=c("y","m","n"),
vSize="Freq",
type="index"
)
#library
library(treemap)
#setting working directory
setwd("~/INGENIERIA_DE_LA_SALUD/4CUARTO/SEGUNDO_CUATRIMESTRE/TFG/CODE/DL_CancerSurvivalPrediction")
#reading pat1 csv
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
names(counts) <- c("y", "m", "n", "Freq")
nrow(counts)
counts <- counts[seq(1,10000),]
# treemap
a =treemap(counts,
index=c("y","m","n"),
vSize="Freq",
type="index"
)
nrow(counts)
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
names(counts) <- c("y", "m", "n", "Freq")
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
names(counts) <- c("y", "m", "n", "Freq")
nrow(counts)
nrow(pat1)
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
names(counts) <- c("y", "m", "n", "Freq")
nrow(counts)
nrow(pat1)
view(counts)
View(counts)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName, pat1$TCGA.19.1787.01), nrow)
names(counts) <- c("y", "m", "n", "exp", "Freq")
nrow(counts)
pat1
View(pat1)
#reading pat1 csv
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
counts
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName, pat1$TCGA.19.1787.01), nrow)
names(counts) <- c("y", "m", "n", "exp", "Freq")
nrow(counts)
counts <- counts[seq(1,10000),]
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="index",
color="exp"
)
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="color",
vColor="exp"
)
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="value"
)
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="index"
)
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n","exp"),
vSize="Freq",
type="index"
)
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="index"
)
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="value"
)
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="value",
vColor = "exp"
)
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName, pat1$TCGA.19.1787.01), nrow)
names(counts) <- c("y", "m", "n", "exp", "Freq")
nrow(counts)
counts <- counts[seq(1,10000),]
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="value",
vColor = "exp"
)
counts
#library
library(treemap)
#setting working directory
setwd("~/INGENIERIA_DE_LA_SALUD/4CUARTO/SEGUNDO_CUATRIMESTRE/TFG/CODE/DL_CancerSurvivalPrediction")
#reading pat1 csv
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName), nrow)
names(counts) <- c("y", "m", "n", "exp", "Freq")
nrow(counts)
counts <- counts[seq(1,10000),]
# treemap
a =treemap(pat1[seq(1,100),],
index=c("y","m","n"),
vSize="Freq",
type="index"
)
pat1 <- read.csv("pat1.csv")
pat1$TCGA.19.1787.01 <- abs(pat1$TCGA.19.1787.01)
library(plyr)
counts <- ddply(pat1, .(pat1$Functional.Annotation.Subgroup, pat1$Functional.Annotation, pat1$geneName, pat1$TCGA.19.1787.01), nrow)
names(counts) <- c("y", "m", "n", "exp", "Freq")
nrow(counts)
counts <- counts[seq(1,10000),]
# treemap
a =treemap(counts,
index=c("y","m","n"),
vSize="Freq",
type="value",
vColor="exp"
)
